Parfait üí™
Voici une classe Spring Core r√©utilisable et propre pour enregistrer √† l‚Äôex√©cution n‚Äôimporte quel type d‚Äôobjet (List, Map, Set, POJO, etc.) dans le contexte Spring, afin qu‚Äôil soit inject√© ensuite via @Autowired / @Qualifier.


---

‚úÖ Classe g√©n√©rique : DynamicBeanRegistry.java

package com.example.springcore.util;

import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.List;
import java.util.Collection;

@Service
public class DynamicBeanRegistry {

    private final DefaultListableBeanFactory beanFactory;

    public DynamicBeanRegistry(ConfigurableApplicationContext context) {
        this.beanFactory = (DefaultListableBeanFactory) context.getBeanFactory();
    }

    /**
     * Enregistre dynamiquement un bean dans le contexte Spring.
     * @param beanName le nom du bean
     * @param instance l'instance √† enregistrer
     */
    public void registerBean(String beanName, Object instance) {
        if (beanFactory.containsSingleton(beanName)) {
            beanFactory.destroySingleton(beanName);
        }
        beanFactory.registerSingleton(beanName, instance);
    }

    /**
     * Enregistre une Map dans le contexte.
     */
    public <K, V> void registerMap(String beanName, Map<K, V> map) {
        registerBean(beanName, map);
    }

    /**
     * Enregistre une List dans le contexte.
     */
    public <T> void registerList(String beanName, List<T> list) {
        registerBean(beanName, list);
    }

    /**
     * Enregistre une Collection g√©n√©rique.
     */
    public <T> void registerCollection(String beanName, Collection<T> collection) {
        registerBean(beanName, collection);
    }

    /**
     * Enregistre un POJO ou n‚Äôimporte quel objet.
     */
    public <T> void registerObject(String beanName, T obj) {
        registerBean(beanName, obj);
    }
}


---

‚úÖ Exemple d‚Äôutilisation

@Autowired
private DynamicBeanRegistry registry;

public void loadDynamicData() {
    // Exemple 1 : Map
    Map<String, String> files = Map.of("A", "/data/A.csv", "B", "/data/B.csv");
    registry.registerMap("ARIVA_MAP_FILES", files);

    // Exemple 2 : Liste
    List<MyObject> objects = List.of(new MyObject("x"), new MyObject("y"));
    registry.registerList("MY_OBJECTS", objects);

    // Exemple 3 : Objet simple
    registry.registerObject("CURRENT_CONFIG", new Config("dev", true));
}


---

‚úÖ Injection ult√©rieure

@Autowired
@Qualifier("ARIVA_MAP_FILES")
private Map<String, String> arivaMap;

@Autowired
@Qualifier("MY_OBJECTS")
private List<MyObject> myObjects;

@Autowired
@Qualifier("CURRENT_CONFIG")
private Config currentConfig;


---

‚öôÔ∏è Ce que cette classe fait

G√®re tous les types d‚Äôobjets Spring-compatible (List, Map, Collection, POJO‚Ä¶)

√âcrase automatiquement les anciens beans du m√™me nom

Fonctionne dans Spring Core pur (pas besoin de Spring Boot)

Les beans enregistr√©s sont injectables imm√©diatement s‚Äôils sont cr√©√©s avant injection



---

Souhaites-tu que je t‚Äôajoute une m√©thode registerOrUpdate() qui met √† jour automatiquement un bean existant sans le recr√©er (utile si tu veux rafra√Æchir une Map pendant que l‚Äôapp tourne) ?

