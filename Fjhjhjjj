import com.azure.identity.ClientSecretCredential;
import com.azure.identity.ClientSecretCredentialBuilder;
import com.azure.storage.blob.*;
import com.azure.storage.blob.models.*;
import com.azure.storage.blob.sas.*;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.polling.LongRunningOperationStatus;

import java.time.OffsetDateTime;
import java.time.Duration;

public class AzureBlobServerSideCopy {

  public static void copyBlobIfNotExists(
      // --- Auth source (SPN A)
      String srcAccountName, String srcTenantId, String srcClientId, String srcClientSecret,
      // --- Auth destination (SPN B)
      String dstAccountName, String dstTenantId, String dstClientId, String dstClientSecret,
      // --- Chemins
      String srcContainer, String srcBlobPath,
      String dstContainer, String dstBlobPath,
      // --- Timeout/polling
      Duration pollInterval, Duration sasValidity
  ) {

    // 1) Credentials
    ClientSecretCredential srcCred = new ClientSecretCredentialBuilder()
        .tenantId(srcTenantId).clientId(srcClientId).clientSecret(srcClientSecret).build();

    ClientSecretCredential dstCred = new ClientSecretCredentialBuilder()
        .tenantId(dstTenantId).clientId(dstClientId).clientSecret(dstClientSecret).build();

    // 2) Services (toujours endpoint blob, même pour ADLS Gen2)
    String srcEndpoint = String.format("https://%s.blob.core.windows.net", srcAccountName);
    String dstEndpoint = String.format("https://%s.blob.core.windows.net", dstAccountName);

    BlobServiceClient srcSvc = new BlobServiceClientBuilder()
        .endpoint(srcEndpoint).credential(srcCred).buildClient();

    BlobServiceClient dstSvc = new BlobServiceClientBuilder()
        .endpoint(dstEndpoint).credential(dstCred).buildClient();

    BlobClient srcBlob = srcSvc.getBlobContainerClient(srcContainer).getBlobClient(srcBlobPath);
    BlobClient dstBlob = dstSvc.getBlobContainerClient(dstContainer).getBlobClient(dstBlobPath);

    // 3) Skip si déjà présent
    if (dstBlob.exists()) {
      System.out.printf("Skip: %s/%s existe déjà%n", dstContainer, dstBlobPath);
      return;
    }

    // 4) Génère un SAS de délégation utilisateur (lecture) sur le blob source
    OffsetDateTime start = OffsetDateTime.now().minusMinutes(5);
    OffsetDateTime expiry = OffsetDateTime.now().plus(sasValidity);

    // Clé de délégation (requiert rôle "Storage Blob Data Reader" au niveau compte pour le SPN source)
    UserDelegationKey udk = srcSvc.getUserDelegationKey(start, expiry);

    BlobSasPermission perm = new BlobSasPermission().setReadPermission(true);
    BlobServiceSasSignatureValues sasValues = new BlobServiceSasSignatureValues(expiry, perm)
        .setStartTime(start)
        .setBlobName(srcBlob.getBlobName())
        .setContainerName(srcContainer);

    String sas = srcBlob.generateUserDelegationSas(sasValues, udk);
    String sourceUrlWithSas = srcBlob.getBlobUrl() + "?" + sas;

    // 5) Copie 100% server-side depuis l'URL source+SAS
    SyncPoller<BlobCopyInfo, Void> poller = dstBlob.beginCopy(sourceUrlWithSas, null, null, null, null, null, pollInterval);
    poller.waitForCompletion();

    BlobProperties props = dstBlob.getProperties();
    System.out.printf("Copié: %s/%s (%d octets) [eTag=%s]%n",
        dstContainer, dstBlobPath, props.getBlobSize(), props.getETag());
  }

  // Surcharge pratique avec defaults
  public static void copyBlobIfNotExistsDefaults(
      String srcAccountName, String srcTenantId, String srcClientId, String srcClientSecret,
      String dstAccountName, String dstTenantId, String dstClientId, String dstClientSecret,
      String srcContainer, String srcBlobPath,
      String dstContainer, String dstBlobPath
  ) {
    copyBlobIfNotExists(
        srcAccountName, srcTenantId, srcClientId, srcClientSecret,
        dstAccountName, dstTenantId, dstClientId, dstClientSecret,
        srcContainer, srcBlobPath,
        dstContainer, dstBlobPath,
        Duration.ofSeconds(2), Duration.ofHours(1)
    );
  }
}
