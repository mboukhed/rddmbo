import com.azure.core.credential.TokenRequestContext;
import com.azure.core.util.polling.SyncPoller;
import com.azure.identity.ClientSecretCredential;
import com.azure.identity.ClientSecretCredentialBuilder;
import com.azure.storage.blob.*;
import com.azure.storage.blob.models.BlobCopyInfo;
import com.azure.storage.blob.models.BlobItem;
import com.azure.storage.blob.models.ListBlobsOptions;

import java.time.Duration;

public class LocalBlobCopyFlat {

    public static void main(String[] args) {
        if (args.length != 12) {
            System.err.println("Usage: SRC_ACC SRC_CONT SRC_PATH  DST_ACC DST_CONT DST_PATH  SRC_TENANT SRC_ID SRC_SEC  DST_TENANT DST_ID DST_SEC");
            System.exit(1);
        }

        // Args
        String SRC_ACC = args[0], SRC_CONT = args[1], SRC_PATH = args[2];
        String DST_ACC = args[3], DST_CONT = args[4], DST_PATH = args[5];
        String SRC_TENANT = args[6], SRC_ID = args[7], SRC_SEC = args[8];
        String DST_TENANT = args[9], DST_ID = args[10], DST_SEC = args[11];

        // Credentials (2 SPN)
        ClientSecretCredential srcCred = new ClientSecretCredentialBuilder()
                .tenantId(SRC_TENANT).clientId(SRC_ID).clientSecret(SRC_SEC).build();
        ClientSecretCredential dstCred = new ClientSecretCredentialBuilder()
                .tenantId(DST_TENANT).clientId(DST_ID).clientSecret(DST_SEC).build();

        // Services Blob (OK sur comptes HNS/Gen2)
        BlobServiceClient sSvc = new BlobServiceClientBuilder()
                .endpoint("https://" + SRC_ACC + ".blob.core.windows.net")
                .credential(srcCred)
                .buildClient();
        BlobServiceClient dSvc = new BlobServiceClientBuilder()
                .endpoint("https://" + DST_ACC + ".blob.core.windows.net")
                .credential(dstCred)
                .buildClient();

        BlobContainerClient sCont = sSvc.getBlobContainerClient(SRC_CONT);
        BlobContainerClient dCont = dSvc.getBlobContainerClient(DST_CONT);

        // Bearer pour autoriser la lecture de la source privée
        String bearer = "Bearer " + srcCred
                .getToken(new TokenRequestContext().addScopes("https://storage.azure.com/.default"))
                .block().getToken();

        // Normalisation des prefixes
        String srcPrefix = SRC_PATH.endsWith("/") ? SRC_PATH : SRC_PATH + "/";
        String dstPrefix = DST_PATH.endsWith("/") ? DST_PATH : DST_PATH + "/";

        // Listing NON récursif (délimiteur "/")
        ListBlobsOptions listOpt = new ListBlobsOptions().setPrefix(srcPrefix);
        for (BlobItem bi : sCont.listBlobsByHierarchy("/", listOpt, null)) {
            // Ignore les "dossiers" (prefixes)
            if (bi.isPrefix() != null && bi.isPrefix()) {
                System.out.println("Ignore dir: " + bi.getName());
                continue;
            }

            String srcName = bi.getName(); // ex: folder/file.json
            String fileName = srcName.substring(srcName.lastIndexOf('/') + 1);
            String dstName = dstPrefix + fileName;

            BlobClient dst = dCont.getBlobClient(dstName);
            if (dst.exists()) {
                System.out.println("Skip (exists): " + dstName);
                continue;
            }

            String srcUrl = sCont.getBlobClient(srcName).getBlobUrl();

            // beginCopy(url, metadata, tags, rehydratePriority, destConditions, sourceAuthorization, pollInterval)
            SyncPoller<BlobCopyInfo, Void> poller = dst.beginCopy(
                    srcUrl,
                    null,   // metadata
                    null,   // tags
                    null,   // rehydrate priority
                    null,   // destination conditions
                    bearer, // <-- Authorization de la source
                    Duration.ofSeconds(2)
            );
            poller.waitForCompletion();

            System.out.println("Copied: " + srcName + " -> " + dstName);
        }

        System.out.println("✅ Done (flat, non-recursive).");
    }
}
