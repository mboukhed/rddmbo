Parfait — voilà comment faire pour que 3 modules n’héritent pas de la version du parent et utilisent une version portée par des propriétés (tout en évitant les warnings Maven).


---

1) POM parent (packaging pom)

On déclare 3 propriétés de version (une par module).

On fige les versions des plugins (constants) pour éviter les warnings.

(Optionnel mais recommandé) on ajoute flatten-maven-plugin pour résoudre les propriétés en versions concrètes au build.


<!-- parent/pom.xml -->
<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>parent</artifactId>
  <version>1.0.0</version>
  <packaging>pom</packaging>

  <modules>
    <module>module-a</module>
    <module>module-b</module>
    <module>module-c</module>
  </modules>

  <properties>
    <!-- Versions des modules (tu gères ici) -->
    <moduleA.version>1.2.3</moduleA.version>
    <moduleB.version>2.0.0</moduleB.version>
    <moduleC.version>3.1.0-SNAPSHOT</moduleC.version>
    <!-- Java, etc. -->
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
  </properties>

  <!-- Figer les versions de plugins (constantes !) -->
  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.11.0</version>
          <configuration>
            <release>${maven.compiler.source}</release>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>3.2.5</version>
        </plugin>
        <!-- etc. -->
      </plugins>
    </pluginManagement>

    <!-- Recommandé pour éviter les warnings “version contains an expression” -->
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>flatten-maven-plugin</artifactId>
        <version>1.5.0</version>
        <configuration>
          <updatePomFile>true</updatePomFile>
          <flattenMode>resolveCiFriendliesOnly</flattenMode>
        </configuration>
        <executions>
          <execution>
            <id>flatten</id>
            <phase>process-resources</phase>
            <goals><goal>flatten</goal></goals>
          </execution>
          <execution>
            <id>flatten-clean</id>
            <phase>clean</phase>
            <goals><goal>clean</goal></goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>


---

2) POMs des 3 modules

Chaque module garde le parent (pour hériter des plugins, deps, etc.).

On fixe sa propre <version> via la propriété définie dans le parent.


<!-- module-a/pom.xml -->
<project>
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.example</groupId>
    <artifactId>parent</artifactId>
    <version>1.0.0</version> <!-- version CONSTANTE du parent -->
    <relativePath>../parent</relativePath>
  </parent>

  <artifactId>module-a</artifactId>
  <version>${moduleA.version}</version> <!-- <- ne suit PAS le parent -->
  <packaging>jar</packaging>
</project>

<!-- module-b/pom.xml -->
<project>
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.example</groupId>
    <artifactId>parent</artifactId>
    <version>1.0.0</version>
    <relativePath>../parent</relativePath>
  </parent>

  <artifactId>module-b</artifactId>
  <version>${moduleB.version}</version>
  <packaging>jar</packaging>
</project>

<!-- module-c/pom.xml -->
<project>
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.example</groupId>
    <artifactId>parent</artifactId>
    <version>1.0.0</version>
    <relativePath>../parent</relativePath>
  </parent>

  <artifactId>module-c</artifactId>
  <version>${moduleC.version}</version>
  <packaging>jar</packaging>
</project>

> ✅ Ici, les modules ne prennent pas la version du parent.
✅ Tu pilotes leurs versions depuis les propriétés du parent.
✅ Avec flatten, Maven résout les propriétés → pas de warning à la publication.




---

3) Si les modules dépendent entre eux

Référence la même propriété pour rester cohérent :

<!-- ex: module-a dépend de module-b -->
<dependency>
  <groupId>com.example</groupId>
  <artifactId>module-b</artifactId>
  <version>${moduleB.version}</version>
</dependency>


---

Notes rapides

Si tu n’utilises pas flatten-maven-plugin, Maven >= 3.9.x peut afficher le warning “version contains an expression but should be a constant” pour <version>${...}</version>.
→ flatten le supprime en “matérialisant” les versions.

Tu peux renommer les propriétés (app.moduleA.version, etc.), c’est libre — garde juste la cohérence partout.


Si tu me donnes les noms réels de tes 3 modules, je te génère les POMs complets prêts à coller.

